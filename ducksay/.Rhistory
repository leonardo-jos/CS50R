# Create a temporary document to add the table block
temp_doc <- read_doc()
temp_doc <- block_add(temp_doc, block)
# Extract text from the table block
table_text <- doc_summary(temp_doc)
extracted_text <- c(extracted_text, table_text)
}
}
# Iterate through the document's blocks
for (block in block_table(doc)) {
# Check if the block is a table
if (block$type == "table") {
# Create a temporary document to add the table block
temp_doc <- read_docx()
temp_doc <- block_add(temp_doc, block)
# Extract text from the table block
table_text <- doc_summary(temp_doc)
extracted_text <- c(extracted_text, table_text)
}
}
# Extract the body of the document
body <- docx_body(doc)
View(doc)
View(doc)
View(doc)
type(doc)
class(doc)
# Extract the body of the document
body <- docx_summary(doc)
# Iterate through the document's blocks
for (block in block_table(body)) {
# Check if the block is a table
if (block$type == "table") {
# Create a temporary document to add the table block
temp_doc <- read_docx()
temp_doc <- block_add(temp_doc, block)
# Extract text from the table block
table_text <- doc_summary(temp_doc)
extracted_text <- c(extracted_text, table_text)
}
}
View(body)
install.packages("stringr")
library(stringr)
# Path to your Word document
doc_path <- "C:/Users/Lenovo/Downloads/Claims Review Report Template.docx"
# Read the Word document
doc <- read_docx(doc_path)
# Extract the body of the document
body <- docx_summary(doc)# Install and load the stringr package
# Extract names between < and > from all instances
all_names <- unlist(str_extract_all(body$text, "<(.*?)>"))
# Display the resulting vector of names
print(all_names)
# Extract names between < and > from all instances
all_names <- unique(unlist(str_extract_all(body$text, "<(.*?)>")))
# Display the resulting vector of names
print(all_names)
# Extract names between < and > from all instances
all_names <- unlist(str_extract_all(body$text, "<(.*?)>"))
# Drop duplicates and NA values
fields <- unique(all_names[!is.na(all_names)])
# Display the resulting vector of names
print(fields)
# Extract names between < and > from all instances
all_names <- unlist(str_extract_all(body$text, "<(.*?)>")[[1]])
# Drop duplicates and NA values, remove empty strings (resulting from unmatched delimiters)
all_names <- all_names[all_names != ""]
fields <- unique(all_names[!is.na(all_names)])
# Display the resulting vector of names
print(fields)
# Remove empty strings and delimiters
all_names <- gsub("<|>", "", all_names)
all_names <- all_names[all_names != ""]
# Drop duplicates and NA values
fields <- unique(all_names[!is.na(all_names)])
# Display the resulting vector of names
print(fields)
# Extract names between < and > from all instances
all_names <- unlist(str_extract_all(body$text, "<(.*?)>"))
# Remove empty strings and delimiters
all_names <- gsub("<|>", "", all_names)
all_names <- all_names[all_names != ""]
# Drop duplicates and NA values
fields <- unique(all_names[!is.na(all_names)])
# Display the resulting vector of names
print(fields)
View(block)
View(block)
View(body)
View(block)
View(doc)
View(doc)
View(doc)
# api.R
install.packages("plumber")
library(plumber)
library(officer)
# Define a function to replace placeholders in .docx template
replace_placeholders <- function(template_path, values) {
doc <- read_docx(template_path)
# Replace placeholders in the document
for (key in names(values)) {
doc <- doc %>%
body_replace_text(pattern = key, value = values[[key]])
}
return(doc)
}
# Create a plumber API
pr <- plumber::plumber()
# api.R
install.packages("plumber")
library(plumber)
library(officer)
# Define a function to replace placeholders in .docx template
replace_placeholders <- function(template_path, values) {
doc <- read_docx(template_path)
# Replace placeholders in the document
for (key in names(values)) {
doc <- doc %>%
body_replace_text(pattern = key, value = values[[key]])
}
return(doc)
}
# Create a plumber API
pr <- plumber::plumber()
install.packages("plumber")
# api.R
library(plumber)
library(officer)
# Define a function to replace placeholders in .docx template
replace_placeholders <- function(template_path, values) {
doc <- read_docx(template_path)
# Replace placeholders in the document
for (key in names(values)) {
doc <- doc %>%
body_replace_text(pattern = key, value = values[[key]])
}
return(doc)
}
# Create a plumber API
pr <- plumber::plumber()
# api.R
library(plumber)
library(officer)
# Define a function to replace placeholders in .docx template
replace_placeholders <- function(template_path, values) {
doc <- read_docx(template_path)
# Replace placeholders in the document
for (key in names(values)) {
doc <- doc %>%
body_replace_text(pattern = key, value = values[[key]])
}
return(doc)
}
# Create a plumber API
my_api <- plumber::plumber()
# api.R
library(plumber)
library(officer)
# Define a function to replace placeholders in .docx template
replace_placeholders <- function(template_path, values) {
doc <- read_docx(template_path)
# Replace placeholders in the document
for (key in names(values)) {
doc <- doc %>%
body_replace_text(pattern = key, value = values[[key]])
}
return(doc)
}
# Create a plumber API
my_api <- plumber::plumber()
N <- length(fields)
input = seq(1,N)
values <- rbind(fields,input)
View(values)
Run the function with the above specified arguments
# Run the function with the above specified arguments
doc <- replace_placeholders(doc_path, values)
# Save the modified document
output_path <- "C:/Users/Lenovo/Downloads/Claims Review Report.docx"
print(doc, target = output_path)
names(values)
N
input
doc_path
dimnames(values)
values <- setNames(input,field)
View(values)
values
# Run the function with the above specified arguments
doc <- replace_placeholders(doc_path, values)
# Save the modified document
output_path <- "C:/Users/Lenovo/Downloads/Claims Review Report.docx"
print(doc, target = output_path)
names(values)
input <- seq(1,N)
values <- setNames(input, fields)
names(values)
# Run the function with the above specified arguments
doc <- replace_placeholders(doc_path, values)
# Define a function to replace placeholders in .docx template
replace_placeholders <- function(template_path, values) {
doc <- read_docx(template_path)
# Replace placeholders in the document
for (key in names(values)) {
doc <- ftext_replace_all(doc, pattern = key, value = values[[key]])
}
return(doc)
}
# Run the function with the above specified arguments
doc <- replace_placeholders(doc_path, values)
# Define a function to replace placeholders in .docx template
replace_placeholders <- function(template_path, values) {
doc <- read_docx(template_path)
# Replace placeholders in the document
for (key in names(values)) {
doc <- ftext_replace(doc, pattern = key, value = values[[key]])
}
return(doc)
}
# Run the function with the above specified arguments
doc <- replace_placeholders(doc_path, values)
# Replace placeholders in the document
for (key in names(values)) {
doc <- body_replace_all_text(doc, key, values[[key]])
}
N <- length(fields)
input <- as.character(seq(1,N))
values <- setNames(input, fields)
# Define a function to replace placeholders in .docx template
replace_placeholders <- function(template_path, values) {
doc <- read_docx(template_path)
# Replace placeholders in the document
for (key in names(values)) {
doc <- body_replace_all_text(doc, key, values[[key]])
}
return(doc)
}
# Run the function with the above specified arguments
doc <- replace_placeholders(doc_path, values)
# Save the modified document
output_path <- "C:/Users/Lenovo/Downloads/Claims Review Report.docx"
print(doc, target = output_path)
values
# Run the function with the above specified arguments
doc <- replace_placeholders(doc_path, values)
# Save the modified document
output_path <- "C:/Users/Lenovo/Downloads/Claims Review Report.docx"
print(doc, target = output_path)
# Define a function to replace placeholders in .docx template
replace_placeholders <- function(template_path, values) {
doc <- read_docx(template_path)
# Replace placeholders in the document
for (key in names(values)) {
doc <- body_replace_text_at_bkm(doc, key, values[[key]])
}
return(doc)
}
# Run the function with the above specified arguments
doc <- replace_placeholders(doc_path, values)
# Save the modified document
output_path <- "C:/Users/Lenovo/Downloads/Claims Review Report.docx"
print(doc, target = output_path)
# Define a function to replace placeholders in .docx template
replace_placeholders <- function(template_path, values) {
doc <- read_docx(template_path)
# Replace placeholders in the document
for (key in names(values)) {
doc <- body_bookmark(doc, key) # set bkm
doc <- body_replace_text_at_bkm(doc, key, values[[key]]) # replace at bkm
}
return(doc)
}
# Run the function with the above specified arguments
doc <- replace_placeholders(doc_path, values)
# Define a function to replace placeholders in .docx template
replace_placeholders <- function(template_path, values) {
doc <- read_docx(template_path)
# Replace placeholders in the document
for (key in names(values)) {
doc <- body_bookmark(doc, key) # set bkm
doc <- body_replace_text_at_bkm(doc, key, values[[key]]) # replace at bkm
}
return(doc)
}
# Run the function with the above specified arguments
doc <- replace_placeholders(doc_path, values)
# Run the function with the above specified arguments
doc <- replace_placeholders(doc_path, values)
doc <- body_replace_text_at_bkm(doc, key, values[[key]]) # replace at bkm
# Run the function with the above specified arguments
doc <- replace_placeholders(doc_path, values)
# Define a function to replace placeholders in .docx template
replace_placeholders <- function(template_path, values) {
doc <- read_docx(template_path)
# Replace placeholders in the document
#for (key in names(values)) {
key <- names(values)[[0]]
doc <- body_bookmark(doc, key) # set bkm
doc <- body_replace_text_at_bkm(doc, key, values[[key]]) # replace at bkm
#}
return(doc)
}
# Run the function with the above specified arguments
doc <- replace_placeholders(doc_path, values)
# Define a function to replace placeholders in .docx template
replace_placeholders <- function(template_path, values) {
doc <- read_docx(template_path)
# Replace placeholders in the document
#for (key in names(values)) {
key <- names(values)[[1]]
doc <- body_bookmark(doc, key) # set bkm
doc <- body_replace_text_at_bkm(doc, key, values[[key]]) # replace at bkm
#}
return(doc)
}
# Run the function with the above specified arguments
doc <- replace_placeholders(doc_path, values)
# Save the modified document
output_path <- "C:/Users/Lenovo/Downloads/Claims Review Report.docx"
print(doc, target = output_path)
# Define a function to replace placeholders in .docx template
replace_placeholders <- function(template_path, values) {
doc <- read_docx(template_path)
# Replace placeholders in the document
for (key in names(values)) {
doc <- body_replace_all_text(doc, key, values[[key]])
}
return(doc)
}
# Run the function with the above specified arguments
doc <- replace_placeholders(doc_path, values)
# Save the modified document
output_path <- "C:/Users/Lenovo/Downloads/Claims Review Report.docx"
print(doc, target = output_path)
View(doc)
View(doc)
View(doc)
doc <- read_docx(template_path)
doc <- read_docx(doc_path)
# Save the modified document
output_path <- "C:/Users/Lenovo/Downloads/Claims Review Report.docx"
print(doc, target = output_path)
# Save the modified document
output_path <- "C:/Users/Lenovo/Downloads/Claims Review Report.docx"
print(doc, target = output_path)
# Save the modified document
output_path <- "C:/Users/Lenovo/Downloads/Claims Review Report.docx"
docx_save(doc, target = output_path)
print(doc, target = output_path)
# Define a function to replace placeholders in .docx template
replace_placeholders <- function(template_path, values) {
doc <- read_docx(template_path)
# Replace placeholders in the document
for (key in names(values)) {
doc <- body_replace_all_text(doc, key, values[[key]])
}
return(doc)
}
# Run the function with the above specified arguments
doc <- replace_placeholders(doc_path, values)
# Save the modified document
output_path <- "C:/Users/Lenovo/Downloads/Claims Review Report.docx"
print(doc, target = output_path)
install.packages("tidyverse")
.libPaths("C:/Program Files/R/R-4.3.2/library" )
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
setwd(file.path)
setwd(file.path(getwd(), "Ribbon"))
file.create("read_json.R")
file.edit("read_json.R")
install.packages("rjson")
library("rjson")
# Data from insurance company
json_file <- "example.json"
json_data <- fromJSON(paste(readLines(json_file), collapse=""))
json_data <- fromJSON(file=json_file)
View(json_data)
ins_providers <- dplyr::rbind(json_data)
ins_providers <- dplyr::bind_rows(json_data)
View(ins_providers)
nrows(ins_providers)
n(ins_providers)
nrow(ins_providers)
install.packages("readxl")
# Data from our Call Center
xlsx_file <- "example_manual_validation.xlsx"
library(readxl)
val_providers <- read.excel(csv_file)
val_providers <- read_excel(csv_file)
val_providers <- read_excel(xlsx_file)
inner_join(ins_providers, val_providers)
dplyr::inner_join(ins_providers, val_providers)
library(dplyr)
inner_join(ins_providers, val_providers)
View(ins_providers)
View(val_providers)
### Merge
inner_join(ins_providers, val_providers, by "npi")
### Merge
inner_join(ins_providers, val_providers, by = "npi")
ins_providers$npi in val_providers$npi
all(ins_providers$npi in val_providers$npi)
all(ins_providers$npi %in% val_providers$npi)
all(val_providers$npi %in% ins_providers$npi)
setwd("C:\Users\Lenovo\cs50R")
setwd("C:Users\Lenovo\cs50R")
setwd("C:/Users/Lenovo/cs50R")
setwd("C:/Users/Lenovo/Documents/cs50R")
dir.create("Ducksay")
setwd("Ducksay")
file.create("DESCRIPTION")
file.edit("DESCRIPTION")
file.edit("LICENSE")
dir.create("tests")
file.edit("test-ducksay.R")
use_testthat()
library(devtools)
library("devtools)
library("devtools")
install.packages("devtools")
install.packages("devtools")
library("devtools")
library("devtools", dependencies = TRUE)
install.packages("devtools", dependencies = TRUE)
library("devtools")
install.packages("devtools", dependencies = TRUE)
?install.packages
.libPaths()
install.packages("devtools", dependencies = TRUE, lib = Lib.paths()[2])
install.packages("devtools", dependencies = TRUE, lib = libPaths()[2])
install.packages("devtools", dependencies = TRUE, lib = .libPaths()[2])
library("devtools")
install.packages("devtools", dependencies = TRUE, .libPaths()[2])
install.packages("devtools", .libPaths()[2])
install.packages("devtools", .libPaths()[2])
install.packages("devtools", .libPaths()[2], dependencies = TRUE)
install.packages(devtools, .libPaths()[2], dependencies = TRUE)
install.packages("devtools", .libPaths()[2], dependencies = TRUE)
install.packages("devtools", "C:/Program Files/R/R-4.3.2/library", dependencies = TRUE)
use_testthat()
use_test("ducksay")
use_r("ducksay")
file.create("NAMESPACE")
file.edit()
file.edit("NAMESPACE")
load_all()
getwd()
load_all()
installed.packages()
?load_all
use_testthat()
load_all()
install.packages("devtools", type = "win.binary")
install.packages("devtools", type = "win.binary", dependencies = TRUE)
install.packages("devtools", type = "win.binary", dependencies = TRUE)
load_all
load_all()
load_all()
devtools.load_all()
library("devtools")
install.packages()
install.packages("xtabl")
install.packages("xtable")
install.packages("xtable", dependencies = )
install.packages("xtable", dependencies = TRUE)
library("devtools")
install.packages("xtable", dependencies = TRUE, type = "win.binary")
library("devtools")
install.packages("htmlwidgets", dependencies = TRUE, type = "win.binary")
install.packages("htmlwidgets", dependencies = TRUE, type = "win.binary")
library("devtools")
load_all()
load_all()
cat(ducksay())
test()
test()
?ducksay
dir.create("man")
file.edit("man/ducksay.Rd")
?ducksay
?ducksay
test()
?ducksay
build()
setwd("..")
getwd()
file.edit("greet.R")
source("~/cs50R/greet.R", echo=TRUE)
install.packages()
install.packages("ducksay")
install.packages("ducksay")
install.packages("ducksay_1.0.tar.gz")
install.packages("ducksay_1.0.tar.gz")
getwd()
setwd("..")
getwd()
build()
setwd(file.path, "cs50R")
setwd(paste(file.path, "cs50R")
setwd(paste(file.path, "cs50R")
setwd(paste(file.path, "cs50R"))
setwd(file.path("cs50R"))
getwd()
build()
build()
setwd(file.path("ducksay"))
build()
