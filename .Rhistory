all_names <- unlist(str_extract_all(body$text, "<(.*?)>"))
# Display the resulting vector of names
print(all_names)
# Extract names between < and > from all instances
all_names <- unique(unlist(str_extract_all(body$text, "<(.*?)>")))
# Display the resulting vector of names
print(all_names)
# Extract names between < and > from all instances
all_names <- unlist(str_extract_all(body$text, "<(.*?)>"))
# Drop duplicates and NA values
fields <- unique(all_names[!is.na(all_names)])
# Display the resulting vector of names
print(fields)
# Extract names between < and > from all instances
all_names <- unlist(str_extract_all(body$text, "<(.*?)>")[[1]])
# Drop duplicates and NA values, remove empty strings (resulting from unmatched delimiters)
all_names <- all_names[all_names != ""]
fields <- unique(all_names[!is.na(all_names)])
# Display the resulting vector of names
print(fields)
# Remove empty strings and delimiters
all_names <- gsub("<|>", "", all_names)
all_names <- all_names[all_names != ""]
# Drop duplicates and NA values
fields <- unique(all_names[!is.na(all_names)])
# Display the resulting vector of names
print(fields)
# Extract names between < and > from all instances
all_names <- unlist(str_extract_all(body$text, "<(.*?)>"))
# Remove empty strings and delimiters
all_names <- gsub("<|>", "", all_names)
all_names <- all_names[all_names != ""]
# Drop duplicates and NA values
fields <- unique(all_names[!is.na(all_names)])
# Display the resulting vector of names
print(fields)
View(block)
View(block)
View(body)
View(block)
View(doc)
View(doc)
View(doc)
# api.R
install.packages("plumber")
library(plumber)
library(officer)
# Define a function to replace placeholders in .docx template
replace_placeholders <- function(template_path, values) {
doc <- read_docx(template_path)
# Replace placeholders in the document
for (key in names(values)) {
doc <- doc %>%
body_replace_text(pattern = key, value = values[[key]])
}
return(doc)
}
# Create a plumber API
pr <- plumber::plumber()
# api.R
install.packages("plumber")
library(plumber)
library(officer)
# Define a function to replace placeholders in .docx template
replace_placeholders <- function(template_path, values) {
doc <- read_docx(template_path)
# Replace placeholders in the document
for (key in names(values)) {
doc <- doc %>%
body_replace_text(pattern = key, value = values[[key]])
}
return(doc)
}
# Create a plumber API
pr <- plumber::plumber()
install.packages("plumber")
# api.R
library(plumber)
library(officer)
# Define a function to replace placeholders in .docx template
replace_placeholders <- function(template_path, values) {
doc <- read_docx(template_path)
# Replace placeholders in the document
for (key in names(values)) {
doc <- doc %>%
body_replace_text(pattern = key, value = values[[key]])
}
return(doc)
}
# Create a plumber API
pr <- plumber::plumber()
# api.R
library(plumber)
library(officer)
# Define a function to replace placeholders in .docx template
replace_placeholders <- function(template_path, values) {
doc <- read_docx(template_path)
# Replace placeholders in the document
for (key in names(values)) {
doc <- doc %>%
body_replace_text(pattern = key, value = values[[key]])
}
return(doc)
}
# Create a plumber API
my_api <- plumber::plumber()
# api.R
library(plumber)
library(officer)
# Define a function to replace placeholders in .docx template
replace_placeholders <- function(template_path, values) {
doc <- read_docx(template_path)
# Replace placeholders in the document
for (key in names(values)) {
doc <- doc %>%
body_replace_text(pattern = key, value = values[[key]])
}
return(doc)
}
# Create a plumber API
my_api <- plumber::plumber()
N <- length(fields)
input = seq(1,N)
values <- rbind(fields,input)
View(values)
Run the function with the above specified arguments
# Run the function with the above specified arguments
doc <- replace_placeholders(doc_path, values)
# Save the modified document
output_path <- "C:/Users/Lenovo/Downloads/Claims Review Report.docx"
print(doc, target = output_path)
names(values)
N
input
doc_path
dimnames(values)
values <- setNames(input,field)
View(values)
values
# Run the function with the above specified arguments
doc <- replace_placeholders(doc_path, values)
# Save the modified document
output_path <- "C:/Users/Lenovo/Downloads/Claims Review Report.docx"
print(doc, target = output_path)
names(values)
input <- seq(1,N)
values <- setNames(input, fields)
names(values)
# Run the function with the above specified arguments
doc <- replace_placeholders(doc_path, values)
# Define a function to replace placeholders in .docx template
replace_placeholders <- function(template_path, values) {
doc <- read_docx(template_path)
# Replace placeholders in the document
for (key in names(values)) {
doc <- ftext_replace_all(doc, pattern = key, value = values[[key]])
}
return(doc)
}
# Run the function with the above specified arguments
doc <- replace_placeholders(doc_path, values)
# Define a function to replace placeholders in .docx template
replace_placeholders <- function(template_path, values) {
doc <- read_docx(template_path)
# Replace placeholders in the document
for (key in names(values)) {
doc <- ftext_replace(doc, pattern = key, value = values[[key]])
}
return(doc)
}
# Run the function with the above specified arguments
doc <- replace_placeholders(doc_path, values)
# Replace placeholders in the document
for (key in names(values)) {
doc <- body_replace_all_text(doc, key, values[[key]])
}
N <- length(fields)
input <- as.character(seq(1,N))
values <- setNames(input, fields)
# Define a function to replace placeholders in .docx template
replace_placeholders <- function(template_path, values) {
doc <- read_docx(template_path)
# Replace placeholders in the document
for (key in names(values)) {
doc <- body_replace_all_text(doc, key, values[[key]])
}
return(doc)
}
# Run the function with the above specified arguments
doc <- replace_placeholders(doc_path, values)
# Save the modified document
output_path <- "C:/Users/Lenovo/Downloads/Claims Review Report.docx"
print(doc, target = output_path)
values
# Run the function with the above specified arguments
doc <- replace_placeholders(doc_path, values)
# Save the modified document
output_path <- "C:/Users/Lenovo/Downloads/Claims Review Report.docx"
print(doc, target = output_path)
# Define a function to replace placeholders in .docx template
replace_placeholders <- function(template_path, values) {
doc <- read_docx(template_path)
# Replace placeholders in the document
for (key in names(values)) {
doc <- body_replace_text_at_bkm(doc, key, values[[key]])
}
return(doc)
}
# Run the function with the above specified arguments
doc <- replace_placeholders(doc_path, values)
# Save the modified document
output_path <- "C:/Users/Lenovo/Downloads/Claims Review Report.docx"
print(doc, target = output_path)
# Define a function to replace placeholders in .docx template
replace_placeholders <- function(template_path, values) {
doc <- read_docx(template_path)
# Replace placeholders in the document
for (key in names(values)) {
doc <- body_bookmark(doc, key) # set bkm
doc <- body_replace_text_at_bkm(doc, key, values[[key]]) # replace at bkm
}
return(doc)
}
# Run the function with the above specified arguments
doc <- replace_placeholders(doc_path, values)
# Define a function to replace placeholders in .docx template
replace_placeholders <- function(template_path, values) {
doc <- read_docx(template_path)
# Replace placeholders in the document
for (key in names(values)) {
doc <- body_bookmark(doc, key) # set bkm
doc <- body_replace_text_at_bkm(doc, key, values[[key]]) # replace at bkm
}
return(doc)
}
# Run the function with the above specified arguments
doc <- replace_placeholders(doc_path, values)
# Run the function with the above specified arguments
doc <- replace_placeholders(doc_path, values)
doc <- body_replace_text_at_bkm(doc, key, values[[key]]) # replace at bkm
# Run the function with the above specified arguments
doc <- replace_placeholders(doc_path, values)
# Define a function to replace placeholders in .docx template
replace_placeholders <- function(template_path, values) {
doc <- read_docx(template_path)
# Replace placeholders in the document
#for (key in names(values)) {
key <- names(values)[[0]]
doc <- body_bookmark(doc, key) # set bkm
doc <- body_replace_text_at_bkm(doc, key, values[[key]]) # replace at bkm
#}
return(doc)
}
# Run the function with the above specified arguments
doc <- replace_placeholders(doc_path, values)
# Define a function to replace placeholders in .docx template
replace_placeholders <- function(template_path, values) {
doc <- read_docx(template_path)
# Replace placeholders in the document
#for (key in names(values)) {
key <- names(values)[[1]]
doc <- body_bookmark(doc, key) # set bkm
doc <- body_replace_text_at_bkm(doc, key, values[[key]]) # replace at bkm
#}
return(doc)
}
# Run the function with the above specified arguments
doc <- replace_placeholders(doc_path, values)
# Save the modified document
output_path <- "C:/Users/Lenovo/Downloads/Claims Review Report.docx"
print(doc, target = output_path)
# Define a function to replace placeholders in .docx template
replace_placeholders <- function(template_path, values) {
doc <- read_docx(template_path)
# Replace placeholders in the document
for (key in names(values)) {
doc <- body_replace_all_text(doc, key, values[[key]])
}
return(doc)
}
# Run the function with the above specified arguments
doc <- replace_placeholders(doc_path, values)
# Save the modified document
output_path <- "C:/Users/Lenovo/Downloads/Claims Review Report.docx"
print(doc, target = output_path)
View(doc)
View(doc)
View(doc)
doc <- read_docx(template_path)
doc <- read_docx(doc_path)
# Save the modified document
output_path <- "C:/Users/Lenovo/Downloads/Claims Review Report.docx"
print(doc, target = output_path)
# Save the modified document
output_path <- "C:/Users/Lenovo/Downloads/Claims Review Report.docx"
print(doc, target = output_path)
# Save the modified document
output_path <- "C:/Users/Lenovo/Downloads/Claims Review Report.docx"
docx_save(doc, target = output_path)
print(doc, target = output_path)
# Define a function to replace placeholders in .docx template
replace_placeholders <- function(template_path, values) {
doc <- read_docx(template_path)
# Replace placeholders in the document
for (key in names(values)) {
doc <- body_replace_all_text(doc, key, values[[key]])
}
return(doc)
}
# Run the function with the above specified arguments
doc <- replace_placeholders(doc_path, values)
# Save the modified document
output_path <- "C:/Users/Lenovo/Downloads/Claims Review Report.docx"
print(doc, target = output_path)
install.packages("tidyverse")
.libPaths("C:/Program Files/R/R-4.3.2/library" )
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
warning("'x' contains one or more NA values")
average <- function(x){
if(!is.numeric(x)){
stop("'x' must be a numeric vector.")
# see difference to funcitons 'message' or 'warning'
# return(NA)
}
if(any(is.na(x))){
warning("'x' contains one or more NA values")
return(NA)
}
sum(x) / length(x)
}
average(c("1",2,23))
file.create("test-average.R")
file.edit("test-average")
file.edit("test-average.R")
install.packages("testthat")
libray("testthat")
install.packages("testthat")
libray("testthat")
library("testthat")
test_average <- function(){
test_that("'average' calculates the numeric average of given vector",
average(c(1,2,3) == 2),
average(c(-1,-2,0,1,2) == 0)
)
}
test_average()
test_average <- function(){
test_that("'average' calculates the numeric average of given vector",
average(c(1,2,3)) == 2,
average(c(-1,-2,0,1,2)) == 0
)
}
test_average()
file.create("greet.R")
file.edit("greet.R")
greet <- function(to = "world") {
cat(paste("hello,", to))
}
greet("leo")
greet("")
greet()
file.create("test-greet.R")
file.edit("test-greet.R")
library("testthat")
source("average.R")
getwd
getwd()
setwd(path(getwd(),"cs50R"))
setwd(.path(getwd(),"cs50R"))
setwd(cat(getwd(),"cs50R"))
average([NA, NA])
average(c(NA, NA)
)
c(1,1)
setwd(paste(getwd(), "cs50R"))
setwd(path(getwd(), "cs50R"))
setwd(path0(getwd(), "cs50R"))
setwd(cat(getwd(), "/cs50R"))
setwd(.path(getwd(), "cs50R"))
setwd(file.path(getwd(), "cs50R"))
source("average.R")
source("test-average.R")
source("test-average.R")
source("test-average.R")
source("test-average.R")
source("test-average.R")
source("test-average.R")
library("devtools")
library("devtools")
install.packages("devtools")
library("devtools")
source("average.R")
source("test-average.R")
source("test-average.R")
source("test-average.R")
expect_error(average(c("quack!")))
source("test-average.R")
source("test-average.R")
source("test-average.R")
test_that("'average' stops if 'x' is non-numeric", {
expect_error(average(c("quack!")))
expect_error(average(c("1", "2", "3")))
})
test_that("'average' warns about NAs in input", {
expect_warning(average(c(NA, 2, 3)))
expect_warning(average(c(NA, NA, NA)))
})
test_that("'average' returns NA with NAs in input", {
expect_equal(average(c(NA, NA, NA)), NA)
expect_equal(average(c(NA, 0)), NA)
expect_equal(average(c(NA, 2, 0)), NA)
})
source("test-average.R")
source("test-average.R")
source("test-average.R")
source("test-average.R")
source("test-average.R")
source("test-average.R")
test_that("'average' stops if 'x' is non-numeric", {
expect_error(average(c("quack!")))
expect_error(average(c("1", "2", "3")))
})
source("test-average.R")
source("test-average.R")
test_that("'average' returns NA with NAs in input", {
expect_equal(average(c(NA, NA, NA)), NA)
expect_equal(average(c(NA, 0)), NA)
expect_equal(average(c(NA, 2, 0)), NA)
})
source("test-average.R")
source("average.R")
source("test-average.R")
source("average.R")
library("devtools")
test_that("'average' calculates mean", {
expect_equal(average(c(1, 2, 3)), 2)
expect_equal(average(c(-1, -2, 0, 1, 2)), 0)
expect_equal(average(c(-1, -2, 0)), -1)
})
test_that("'average' returns NA with NAs in input", {
expect_equal(average(c(NA, NA, NA)), NA)
expect_equal(average(c(NA, 0)), NA)
})
test_that("'average' warns about NAs in input", {
expect_warning(average(c(NA, 2, 3)))
expect_warning(average(c(NA, NA, NA)))
})
test_that("'average' returns NA with NAs in input", {
expect_equal(average(c(NA, NA, NA)), NA)
expect_equal(average(c(NA, 0)), NA)
})
test_that("'average' warns about NAs in input", {
expect_warning(average(c(NA, 2, 3)))
expect_warning(average(c(NA, NA, NA)))
})
test_that("'average' stops if 'x' is non-numeric", {
expect_error(average(c("quack!")))
expect_error(average(c("1", "2", "3")))
})
test_that("'average' calculates mean", {
expect_equal(average(c(1, 2, 3)), 2)
expect_equal(average(c(-1, -2, 0, 1, 2)), 0)
expect_equal(average(c(-1, -2, 0)), -1)
})
test_that("'average' returns NA with NAs in input", {
expect_equal(average(c(NA, NA, NA)), NA)
expect_equal(average(c(NA, 0)), NA)
})
source("test-average.R")
source("test-average.R")
source("test-average.R")
test-average.r
run(test-average.R)
run("test-average.R)
run("test-average.R")
test_that("'average' calculates mean", {
expect_equal(average(c(1, 2, 3)), 2)
expect_equal(average(c(-1, -2, 0, 1, 2)), 0)
expect_equal(average(c(-1, -2, 0)), -1)
expect_equal(average(c(0.1, 0.6)), 0.3)
})
test_that("'average' calculates mean", {
expect_equal(average(c(1, 2, 3)), 2)
expect_equal(average(c(-1, -2, 0, 1, 2)), 0)
expect_equal(average(c(-1, -2, 0)), -1)
expect_equal(average(c(0.1, 0.5)), 0.3)
})
source("test-average.R")
test_that("'average' returns NA with NAs in input", {
expect_equal(suppressWarning(average(c(NA, NA, NA))), NA)
expect_equal(suppressWarning(average(c(NA, 0))), NA)
})
test_that("'average' returns NA with NAs in input", {
expect_equal(suppressWarnings(average(c(NA, NA, NA))), NA)
expect_equal(suppressWarnings(average(c(NA, 0))), NA)
})
source("test-average.R")
source("test-average.R")
source("test-average.R")
source("test-average.R")
source("test-average.R")
source("test-average.R")
source("~/cs50R/test-greet.R")
file.create("test-average.R")
source("~/cs50R/test-average.R")
file.create("test-average.R")
source("~/cs50R/test-average.R")
source("test-average.R")
source("test-average.R")
